## python 文档注释

1.**文档字符串**

程序代码中, 可以在特定的地方添加描述性文字,　以说明包、模块、函数、类、类方法等相关信息.

在函数的第一个逻辑行的字符串,　称为函数的文档字符串. 函数的文档字符串由于提供函数的帮助信息.

文档字符串一般遵循以下惯例, 文档字符串是一个多行字符串, 首行一大写字母开始,　句号结尾， 第 2 行是空行, 第 3 行开始进行详细的描述.

可以使用以下三种方法抽取函数的文档字符串的帮助信息.

1.使用内置函数: help(函数名)
2.使用函数的特殊属性:函数名.__doc__;
3.第三方自动化工具也可以抽取文档字符串信息，以形成帮助文档




## 程序流程控制
1.**选择结构**

if(条件表达式):
　　　　语句/语句块

a=int(input("请输入第一个整数:"))
b=int(input("请输入第二个整数:"))
print(str.format("输入值:{0},{1}",a,b))
if(a<b):
　　　　t=a
    a=b
    b=t
print(str.format("降序值:{0},{1}",a,b))

2.**双分支结构**

if(条件表达式):
	语句/语句块1
else:
	语句/语句块2



3.**多分支结构**

if(条件表达式 1):
	语句/语句块1
elif(条件表达式 2)::
	语句/语句块2
....
elif(条件表达式 n):
	语句/语句块n
else:
	语句/语句块n+1

4.**if语句的嵌套**

if(条件表达式1):
	if(条件表达式11):
		语句1
	else:
		语句2
else:

	if(条件表达式21):
		语句3
	else:
		语句4	


## 循环结构

1.**可迭代对象**

可迭代对象一次返回一个元素,　因而适用于循环, 可迭代对象包括以下几种:

系列:(字符串, 列表, 元组)
字典
文件对象
迭代器对象
生成器函数

迭代器是一个对象, 表示可迭代的数据集合, 包括方法__iter__()和__next__(),可实现迭代功能.

生成器是一个函数, 使用　yield 语句, 每次产生一个值，也可以用于循环迭代.


1.**for 循环**

for 变量 in 对象集合:
	循环体语句\语句块

for i in (1,2,3):
	print(i,i**2,i**3)


2.**range对象**

range(start,stop[,step])


for i in range(1,11):
	print(i,end="")

for i in range(1,11,3):
	print(i,end="")



python3 中 range 的类型为类

 
sum_odd=0;sum_even=0 
for i in range(1,101): 
    if i%2!=0: 
        sum_odd+=i 
    else: 
        sum_even+=i 
  
print("1~100中所有奇数之和:",sum_odd) 
print("1~100中所有偶数之和:",sum_even) 




4.**while循环**

while(条件表达式):
	循环体语句\语句块

i=1
sum_all=0                                                                   
sum_odd=0                                                                   
sum_even=0                                                                  
while i<=100:                                                               
    sum_all=sum_all+i                                                       
    if i%2==0:                                                              
        sum_even=sum_even+i                                                 
    else:                                                                   
        sum_odd=sum_odd+i                                                   
    i=i+1                                                                   
print("和=%d、奇和=%d、偶和=%d"%(sum_all,sum_odd,sum_even)) 

**注意:** 

一行内输出打印多个值的方法，见上程序的 print().



i=1;e=1;t=1
while(1/t>=pow(10,-6)):
    t*=i
    e+=1/t
    i+=1
print("e=",e)                                        

一个指数函数 pow(a,b) a　是底数 b 是指数

5.**循环的嵌套**

一个循环内又包含另外一个完整的嵌套,成为循环嵌套.这种语句称为多重循环嵌套,内层循环中还可以包含新的循环；(for 循环 while 循环可以相互嵌套)

6.**break 语句**

break 语句用来退出 for 和　while 循环，提前结束循环，接着执行循环语句外的后继语句，**注意** 当有多个　for 或 while 嵌套时， break 语句只用于最里层的语句,即只能跳出最近一层的循环.

7.判断所输入的任何一个正整数是不是素数.一个正整数 m 是不是素数，只需判断 m 是否可以被 2——　$\sqrt{m}$ 之间的任何一个正整数整除，如果 m 不能被　此范围中的任何一个正整数整除，m 就是素数，否则 m 是合数.

8.**continue语句**


continue 与句类似与　break 语句　与必须在　for 或 while 的循环中使用,它结束本次循环，跳过循环体内自 continue 下面未执行的语句，返回到循环的的起始处，并根据循环条件判断是否执行下次循环，

二者的区别在于 continue 值结束本次循环，并且返回到循环的起始处，循环条件满足的话就开始执行下一次循环，而 break 语句则是结束循环，跳出循环体，到继的语句执行.


当多个 for while 语句彼此嵌套时，continue 语句只用于最里层的语句.


9.**else　子句**


for 变量　in 对象集合:
	循环体语句(块)1
else:
	语句(块)2

或者

while (条件表达式):
	循环体语句 1
else:
	语句 2:

 
for 和　while 语句可以附带一个 else 子句, 如果 for 、while 语句 没有被 break 语句中止,则会执行 else 子句，否则不执行.


# 异常处理:

1.**编译(解析器) 错误**:

1.if 1>2  # 语法错误
2.Print("a,b,c") # 拼写错误
3.x  # 引用了不存在的变量，没有定义:

2.**运行时错误**
打开不存在的文件，零除溢出，不同类型不能相加。


3.**逻辑错误**

程序本身不报错，但结果不正确.





、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、



## 字典和集合类型

1.字典

字典是键和值的映射关系，字典的键必须是可 hash d的值,实现了 __hsah__()的对象. 1.对象的 hash 值可以用内置函数 hash()获得；

In [2]: hash('abc')
Out[2]: 1525175390713332347


 
字典对象的方法.
d.clear() 删除所元素
d.copy()浅拷贝字典
d.get(k) 返回 k 所对应的值，如果 key 不存在，返回 None,
d.get(k,v)返回 k 所对应的值，如果 key 不存在，返回 v,



集合

set()创建一个空的可变的集合
set(iterable)创建一个可变集合，包含的项目为可枚举对象iterable 中的元素
frozenset()创建一个空的不可变集合
frozenset(iterable)创建一个不可变集合，包含的项目为可枚举对象iterable 中的元素




文件和流I/Q


文件对象和 open 函数

f=open(file,mode='r',buffering=-1,encoding=None)
其中 file 是要打开和创建的文件名，如果不在当前路径,需指出具体的路径; modle 是打开文件的模式， buffering 表示是否需要缓存, 默认为 -1 表示 系统默认的缓冲1区大小，encoding 文件的编码，open 函数返回一个文件对象 f.



函数声名和调用

def 函数名([形参列表])：
	函数体

函数的调用格式

函数名([实参列表])


类的声名

class 类名:
	类体


class Person1:
	pass

p1=Person1()
print(p1)





1. 实例属性和类的属性

通过 self.变量名定义属性，称为实例化属性，也成实例变量


self.实例变量名=初始值












